# $Id: configure.in,v 1.37 2012/12/09 18:57:52 wb6ymh Exp $
#

AC_INIT(src/thebridge.c)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(thelinkbox,0.53)
AM_CONDITIONAL(LINK_BOX,true)

AC_ARG_ENABLE(usb,
[  --enable-usb            Build thelinkbox with usb support ],

[case "${enableval}" in 
   yes) usb=true ;;
   no)  usb=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-usb) ;;
 esac], [usb=false])
 
AC_ARG_ENABLE(debug,
[  --enable-debug           Build thelinkbox with debug support ],

[case "${enableval}" in 
   yes) export CFLAGS="-O0 -g";export CXXFLAGS="-O0 -g" ;;
   no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
 esac], )

AC_ARG_ENABLE(profiling,
[  --enable-profiling       Build thelinkbox with profiling support ],

[case "${enableval}" in 
   yes) opts="-finstrument-functions -falign-functions=4 -DPROFILED_BUILD"
	export CFLAGS="$CFLAGS $opts";export CXXFLAGS="$CXXFLAGS $opts"
	profiling=true ;;
   no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-profiling) ;;
 esac], )


AC_ARG_WITH([readline],
    [AS_HELP_STRING([--with-readline],
      [enable support for readline])],
    [],
    [with_readline=no])
    
AC_ARG_WITH([dmalloc],
    [AS_HELP_STRING([--with-dmalloc],
      [enable dmalloc memory debugging support])],
    [],
    [with_dmalloc=no])
      
AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_CHECK_PROG(have_c,[$CC],y,n)

if test "have_c" = n; then
   AC_MSG_ERROR([C compiler not found. Please install C (and C++) development tools.])
fi

AC_CHECK_PROG(have_cplus_plus,[$CXX],y,n)

if test "$have_cplus_plus" = n; then
   AC_MSG_ERROR([C++ compiler not found. Please install C++ tools.])
fi

dnl Checks for libraries.
AC_CHECK_LIB(socket,socket)

AC_C_BIGENDIAN([AC_DEFINE([BIG_ENDIAN_MACHINE], [1],[Define if your target is a big endian machine])],,
        [AC_MSG_WARN([Target endian unknown.
Please define BIG_ENDIAN_MACHINE in config.h for big endian targets])])

if test x$usb = xtrue; then
AM_CONDITIONAL(USB_SUPPORT,true)
AC_CHECK_LIB(usb, usb_init, , AC_MSG_ERROR("Can't build without libusb (does your system require a libusb-devel package?)"))
else
AM_CONDITIONAL(USB_SUPPORT,false)
fi

if test x$debug_build = xtrue; then
AM_CONDITIONAL(DEBUG_BUILD,true)
else
AM_CONDITIONAL(DEBUG_BUILD,false)
fi

if test x$profiling = xtrue; then
AM_CONDITIONAL(PROFILED_BUILD,true)
else
AM_CONDITIONAL(PROFILED_BUILD,false)
fi


LIBREADLINE= 
AS_IF([test "x$with_readline" != xno],
    [AC_CHECK_LIB([readline], [main],
      [AC_SUBST([LIBREADLINE], ["-lreadline -lncurses"])
       AC_DEFINE([HAVE_LIBREADLINE], [1],
                 [Define if you have libreadline])
      ],
      [AC_MSG_FAILURE(
         [readline test failed (--without-readline to disable or install readline-devel)])],
      [-lncurses])])

LIBDMALLOC= 
AS_IF([test "x$with_dmalloc" != xno],
    [AC_CHECK_LIB([dmalloc], [main],
      [AC_SUBST([LIBDMALLOC], ["-ldmalloc"])
       AC_DEFINE([HAVE_LIBDMALLOC], [1],
                 [Define if you have libdmalloc])
      ],
      [AC_MSG_FAILURE(
         [dmalloc test failed])],
      [-ldmalloc])])

if test "x$with_dmalloc" != xno; then
AM_CONDITIONAL(USE_DMALLOC,true)
else
AM_CONDITIONAL(USE_DMALLOC,false)
fi

AC_MSG_CHECKING(for EVIOCGUNIQ)

AC_TRY_COMPILE([
    #include <linux/input.h>
    ], [
    #ifndef EVIOCGUNIQ
        #error EVIOCGUNIQ not defined
    #endif    
    ], HAVE_EVIOCGUNIQ=1,HAVE_EVIOCGUNIQ=0)

AC_SUBST(HAVE_EVIOCGUNIQ)

if test "x${HAVE_EVIOCGUNIQ}" != "x0" ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_EVIOCGUNIQ, [], [Define if <linux/input.h> has EVIOCGUNIQ])
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for int8_t...int64_t)

AC_TRY_COMPILE([
    #include <math.h>
    #include <stdlib.h>
    #include <string.h>
    #include <stdarg.h>
    #define HAVE_SIGNED_BITTYPES
    #include "soundmodem/modem.h"
    ], [], HAVE_SIGNED_BITTYPES=0,HAVE_SIGNED_BITTYPES=1)

AC_SUBST(HAVE_SIGNED_BITTYPES)

if test "x${HAVE_SIGNED_BITTYPES}" != "x0" ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_SIGNED_BITTYPES, [], 
    [change if the typedefs in modem.h cause errors])
    
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for u_int8_t...u_int64_t)

AC_TRY_COMPILE([
   #include <math.h>
   #include <stdlib.h>
   #include <string.h>
   #include <stdarg.h>
   #define HAVE_UNSIGNED_BITTYPES
   #include "soundmodem/modem.h"
   ], [], HAVE_UNSIGNED_BITTYPES=0,HAVE_UNSIGNED_BITTYPES=1)

AC_SUBST(HAVE_UNSIGNED_BITTYPES)

if test "x${HAVE_SIGNED_BITTYPES}" != "x0" ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_UNSIGNED_BITTYPES, [], 
    [change if the typedefs in modem.h cause errors])
    
else
    AC_MSG_RESULT(no)
fi

    
dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h sys/signal.h sys/timeb.h)
AC_CHECK_HEADERS(grp.h)
AC_CHECK_HEADERS(math.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(getopt)
AC_CHECK_FUNCS(ftime gettimeofday, break)
AC_CHECK_FUNCS(stricmp strcasecmp, break)


AC_DEFINE_UNQUOTED(OUR_HOST,"${host}",
[Set to a text string describing your operating system and hardware])


AC_OUTPUT(Makefile src/Makefile common/Makefile inc/Makefile zlib/Makefile
gsm/Makefile gsm/src/Makefile gsm/inc/Makefile tlbcmd/Makefile 
spandsp/Makefile adpcm/Makefile linkbox/Makefile scripts/Makefile 
soundmodem/Makefile hrprof/Makefile)
